import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,a as r}from"./app-8chMZ8X4.js";const s={},d=r('<p>Java 反射是指在运行时动态地获取类的信息、调用类的方法和操作类的属性等功能。 通过反射，可以在运行时检查类、实例化对象、调用方法、获取和设置字段值等， 而不需要在编译时就知道这些信息。</p><h3 id="java-反射提供了以下主要的类和接口" tabindex="-1"><a class="header-anchor" href="#java-反射提供了以下主要的类和接口" aria-hidden="true">#</a> Java 反射提供了以下主要的类和接口：</h3><h4 id="class-类" tabindex="-1"><a class="header-anchor" href="#class-类" aria-hidden="true">#</a> Class 类：</h4><p>java.lang.Class 类代表了 Java 类的运行时信息。 可以使用 Class 类的静态方法 forName() 来获取类的 Class 对象， 或者通过对象的 getClass() 方法来获取类的 Class 对象。</p><h4 id="constructor-类" tabindex="-1"><a class="header-anchor" href="#constructor-类" aria-hidden="true">#</a> Constructor 类：</h4><p>java.lang.reflect.Constructor 类用于描述类的构造器， 可以通过 Class 对象的 getConstructors() 方法获取类的所有公共构造器， 或者通过 getDeclaredConstructors() 方法获取类的所有构造器。</p><h4 id="method-类" tabindex="-1"><a class="header-anchor" href="#method-类" aria-hidden="true">#</a> Method 类：</h4><p>java.lang.reflect.Method 类用于描述类的方法， 可以通过 Class 对象的 getMethods() 方法获取类的所有公共方法， 或者通过 getDeclaredMethods() 方法获取类的所有方法。</p><h4 id="field-类" tabindex="-1"><a class="header-anchor" href="#field-类" aria-hidden="true">#</a> Field 类：</h4><p>java.lang.reflect.Field 类用于描述类的字段， 可以通过 Class 对象的 getFields() 方法获取类的所有公共字段， 或者通过 getDeclaredFields() 方法获取类的所有字段</p>',10),c=[d];function o(h,l){return e(),t("div",null,c)}const _=a(s,[["render",o],["__file","07.反射.html.vue"]]);export{_ as default};
