import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as r,a as o}from"./app-25ukqj7I.js";const h={},i=o('<p>定义了Java程序中多线程并发访问共享内存时的行为规范，确保多线程程序的正确性和可预测性</p><h3 id="主内存-main-memory" tabindex="-1"><a class="header-anchor" href="#主内存-main-memory" aria-hidden="true">#</a> 主内存（Main Memory）：</h3><p>主内存是所有线程共享的内存，包含了所有的共享变量。主内存是所有线程的统一视图，每个线程都可以访问主内存中的共享变量。</p><h3 id="工作内存-working-memory" tabindex="-1"><a class="header-anchor" href="#工作内存-working-memory" aria-hidden="true">#</a> 工作内存（Working Memory）：</h3><p>工作内存是每个线程私有的内存区域，用于保存该线程使用到的变量副本。每个线程都拥有自己的工作内存，线程只能直接操作自己的工作内存中的变量副本。</p><h3 id="内存屏障-memory-barriers" tabindex="-1"><a class="header-anchor" href="#内存屏障-memory-barriers" aria-hidden="true">#</a> 内存屏障（Memory Barriers）：</h3><p>内存屏障是一种同步机制，用于确保内存可见性和指令重排序的正确性。内存屏障分为读屏障和写屏障，读屏障用于确保当前线程从主内存中读取最新的数据，写屏障用于确保当前线程将数据写入到主内存中。</p><h3 id="happens-before关系" tabindex="-1"><a class="header-anchor" href="#happens-before关系" aria-hidden="true">#</a> happens-before关系：</h3><p>happens-before关系是JMM中的一个重要概念，用于描述操作之间的偏序关系。如果操作A happens-before操作B，那么A对B的影响将对其他线程可见。happens-before关系可以由程序次序规则、volatile变量规则、监视器锁规则、传递性等规则来确定。</p><h3 id="原子性、可见性、有序性" tabindex="-1"><a class="header-anchor" href="#原子性、可见性、有序性" aria-hidden="true">#</a> 原子性、可见性、有序性：</h3><p>JMM保证了对volatile变量的读写操作是原子性的，且具有可见性和有序性。对于非volatile变量，虽然读写操作不一定是原子性的，但是通过使用锁和内存屏障可以确保可见性和有序性</p>',11),n=[i];function t(s,d){return a(),r("div",null,n)}const m=e(h,[["render",t],["__file","jvm01-内存模型.html.vue"]]);export{m as default};
