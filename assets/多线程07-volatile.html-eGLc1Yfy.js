import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,a as i}from"./app-RaS7ap-Q.js";const r={},l=i('<h2 id="volatile-的特性" tabindex="-1"><a class="header-anchor" href="#volatile-的特性" aria-hidden="true">#</a> volatile 的特性</h2><h3 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h3><p>当一个线程修改了 volatile 变量的值，新的值对其他所有线程立即可见。</p><p>这种可见性保证是通过在变量读写时刷新和更新主内存中的值实现的，确保任何线程对 volatile 变量的读操作都能看到最新的写操作结果。</p><h3 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性" aria-hidden="true">#</a> 有序性</h3><p>volatile 变量禁止指令重排序优化。</p><p>在写入一个 volatile 变量时，会确保在此之前的所有写操作都已完成，并且在读取一个 volatile 变量时，会确保在此之后的所有读操作都已完成。</p><h3 id="不能保证原子性" tabindex="-1"><a class="header-anchor" href="#不能保证原子性" aria-hidden="true">#</a> 不能保证原子性</h3><p>volatile 变量的单次读/写操作是原子的，但复合操作（如 ++、-- 等）不是原子的。</p><p>如果需要对变量进行复合操作，需要使用其他同步机制，如 synchronized 块或 java.util.concurrent 包中的类。</p>',10),o=[l];function h(n,c){return a(),t("div",null,o)}const _=e(r,[["render",h],["__file","多线程07-volatile.html.vue"]]);export{_ as default};
