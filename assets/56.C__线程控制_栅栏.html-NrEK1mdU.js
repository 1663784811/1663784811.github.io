const e=JSON.parse('{"key":"v-dc69c202","path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/56.C__%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6_%E6%A0%85%E6%A0%8F.html","title":"56.C++线程控制_栅栏","lang":"zh-CN","frontmatter":{"article":false,"title":"56.C++线程控制_栅栏","description":"std::barrier 是 C++20 引入的同步机制，用于让多个线程在特定点等待，直到所有线程都到达，然后一起继续执行。 基本使用 使用回调函数 ```cpp #include","head":[["meta",{"property":"og:url","content":"https://xxxxxxx.xxx/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/56.C__%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6_%E6%A0%85%E6%A0%8F.html"}],["meta",{"property":"og:site_name","content":"鱼头笔记"}],["meta",{"property":"og:title","content":"56.C++线程控制_栅栏"}],["meta",{"property":"og:description","content":"std::barrier 是 C++20 引入的同步机制，用于让多个线程在特定点等待，直到所有线程都到达，然后一起继续执行。 基本使用 使用回调函数 ```cpp #include"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-16T04:55:09.000Z"}],["meta",{"property":"article:author","content":"鱼头"}],["meta",{"property":"article:modified_time","content":"2025-02-16T04:55:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"56.C++线程控制_栅栏\\",\\"description\\":\\"std::barrier 是 C++20 引入的同步机制，用于让多个线程在特定点等待，直到所有线程都到达，然后一起继续执行。 基本使用 使用回调函数 ```cpp #include\\"}"]]},"headers":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"使用回调函数","slug":"使用回调函数","link":"#使用回调函数","children":[]}],"git":{"createdTime":1739681709000,"updatedTime":1739681709000,"contributors":[{"name":"why","email":"1663784811@qq.com","commits":1}]},"readingTime":{"minutes":1.01,"words":303},"filePathRelative":"编程语言/c/56.C++线程控制_栅栏.md","localizedDate":"2025年2月16日","autoDesc":true,"excerpt":""}');export{e as data};
