import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as r,a}from"./app-mwHfKamN.js";const e={},h=a('<h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td></tr><tr><td>*</td><td>把两个操作数相乘</td></tr><tr><td>/</td><td>分子除以分母</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td></tr><tr><td>--</td><td>自减运算符，整数值减少 1</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td></tr><tr><td>!=</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都 true，则条件为 true</td></tr><tr><td>||</td><td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。</td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td></tr><tr><td>|=</td><td>按位或且赋值运算符</td></tr></tbody></table><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行&quot;与&quot;运算。</td></tr><tr><td>|</td><td>按位或运算符，按二进制位进行&quot;或&quot;运算。</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行&quot;异或&quot;运算。</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行&quot;取反&quot;运算。</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td></tr></tbody></table>',10),o=[h];function l(i,n){return d(),r("div",null,o)}const s=t(e,[["render",l],["__file","05.运算符.html.vue"]]);export{s as default};
