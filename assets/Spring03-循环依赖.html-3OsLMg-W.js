import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as r,a as n}from"./app-rdhqPKFP.js";const h={},d=n('<h3 id="单例作用域的循环依赖" tabindex="-1"><a class="header-anchor" href="#单例作用域的循环依赖" aria-hidden="true">#</a> 单例作用域的循环依赖</h3><p>Spring 使用三级缓存（three-level cache）来解决循环依赖问题。</p><h4 id="一级缓存" tabindex="-1"><a class="header-anchor" href="#一级缓存" aria-hidden="true">#</a> <strong>一级缓存</strong>：</h4><p>单例池（singleton pool），用于存储完全初始化的单例 bean。</p><h4 id="二级缓存" tabindex="-1"><a class="header-anchor" href="#二级缓存" aria-hidden="true">#</a> <strong>二级缓存</strong>：</h4><p>早期暴露的单例对象池（early singleton pool），用于存储部分初始化的单例 bean（实例化完成但未完成依赖注入）。</p><h4 id="三级缓存" tabindex="-1"><a class="header-anchor" href="#三级缓存" aria-hidden="true">#</a> <strong>三级缓存</strong>：</h4><p>单例工厂（singleton factories），用于存储单例对象工厂，以便在需要时创建 bean 实例。</p><h3 id="处理步骤" tabindex="-1"><a class="header-anchor" href="#处理步骤" aria-hidden="true">#</a> <strong>处理步骤</strong></h3><h4 id="_1-创建-bean-实例" tabindex="-1"><a class="header-anchor" href="#_1-创建-bean-实例" aria-hidden="true">#</a> 1.创建 bean 实例：</h4><p>首先创建 bean 的实例（调用构造函数）。</p><h4 id="_2-提前暴露实例" tabindex="-1"><a class="header-anchor" href="#_2-提前暴露实例" aria-hidden="true">#</a> 2.提前暴露实例：</h4><p>将创建的 bean 实例放入三级缓存中，以便其他 bean 可以引用它。</p><h4 id="_3-注入依赖" tabindex="-1"><a class="header-anchor" href="#_3-注入依赖" aria-hidden="true">#</a> 3.注入依赖：</h4><p>对 bean 进行依赖注入。如果依赖的 bean 也需要注入当前 bean 的实例，则从三级缓存中获取。</p><h4 id="_4-初始化完成" tabindex="-1"><a class="header-anchor" href="#_4-初始化完成" aria-hidden="true">#</a> 4.初始化完成：</h4><p>完成 bean 的初始化（包括调用初始化方法和依赖注入）。</p>',17),i=[d];function t(s,o){return e(),r("div",null,i)}const l=a(h,[["render",t],["__file","Spring03-循环依赖.html.vue"]]);export{l as default};
