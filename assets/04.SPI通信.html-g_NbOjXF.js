import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o as n,c as r,b as e,d,e as t,a as c}from"./app-X9DILhSX.js";const l="/assets/img_16-JmaBVBw-.png",h="/assets/img_17-OEiKXUA-.png",o="/assets/spi001-K6AuwA0I.png",p="/assets/img_15-dJxsFe--.png",m="/assets/img_18-8exI0xTc.png",_={},u=e("p",null,"SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线",-1),g={href:"https://doc.embedfire.com/mcu/stm32/f103/hal_general/zh/latest/doc/chapter24/chapter24.html#spi",target:"_blank",rel:"noopener noreferrer"},S=c(`<h3 id="spi通信具有以下几个主要特点" tabindex="-1"><a class="header-anchor" href="#spi通信具有以下几个主要特点" aria-hidden="true">#</a> SPI通信具有以下几个主要特点：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 全双工（Full-Duplex）通信：主设备和从设备可以同时发送和接收数据，实现了同时的双向数据传输。
2. 同步传输：通信的主设备和从设备需要共享时钟信号，以确保数据的同步传输。
3. 串行通信：数据以位的形式通过单个引脚进行传输，逐位进行
4. 硬件控制：SPI通信不需要复杂的协议来控制通信，而是通过硬件信号进行控制。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SPI一共有四种通讯模式</p><p><img src="`+l+'" alt="img_16.png"><img src="'+h+`" alt="img_17.png"></p><h2 id="物理层" tabindex="-1"><a class="header-anchor" href="#物理层" aria-hidden="true">#</a> 物理层</h2><h3 id="引脚定义" tabindex="-1"><a class="header-anchor" href="#引脚定义" aria-hidden="true">#</a> 引脚定义</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>      主设备                    从设备
MOSI（数据输入）                  MOSI
MISO（数据输出）                  MISO
SCK（时钟）                      SCK
CS（片选）                       CS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接线原理图" tabindex="-1"><a class="header-anchor" href="#接线原理图" aria-hidden="true">#</a> 接线原理图</h3><p><img src="`+o+'" alt="spi001.png"></p><h2 id="协议层" tabindex="-1"><a class="header-anchor" href="#协议层" aria-hidden="true">#</a> 协议层</h2><h3 id="spi基本通讯过程" tabindex="-1"><a class="header-anchor" href="#spi基本通讯过程" aria-hidden="true">#</a> SPI基本通讯过程</h3><p><img src="'+p+'" alt="img_15.png"></p><h3 id="通讯的起始和停止信号" tabindex="-1"><a class="header-anchor" href="#通讯的起始和停止信号" aria-hidden="true">#</a> 通讯的起始和停止信号</h3><p>SS信号线由高变低，是SPI通讯的起始信号。<br> SS信号由低变高，是SPI通讯的停止信号。</p><h3 id="数据有效性-其中一种工作模式" tabindex="-1"><a class="header-anchor" href="#数据有效性-其中一种工作模式" aria-hidden="true">#</a> 数据有效性 ( 其中一种工作模式 )</h3><p>1.保证两个SPI通讯设备之间使用同样的协定<br> 2.上图: SCK的下降沿时被采样。即在SCK的下降沿时刻，MOSI及MISO的数据有效，高电平时表示数据“1”，为低电平时表示数据“0”<br> 3.SPI每次数据传输可以8位或16位为单位，每次传输的单位数不受限制。</p><h3 id="通讯过程" tabindex="-1"><a class="header-anchor" href="#通讯过程" aria-hidden="true">#</a> 通讯过程</h3><p>例: STM32作为SPI通讯的主机端时的数据收发过程。</p><p><img src="'+m+'" alt="img_18.png"></p>',19);function v(b,x){const a=s("ExternalLinkIcon");return n(),r("div",null,[u,e("p",null,[e("a",g,[d("文档参考地址"),t(a)])]),S])}const P=i(_,[["render",v],["__file","04.SPI通信.html.vue"]]);export{P as default};
