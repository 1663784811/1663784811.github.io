import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as i,a as d}from"./app-Akm28-ZI.js";const n={},s=d(`<h2 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载" aria-hidden="true">#</a> 类加载</h2><h3 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程" aria-hidden="true">#</a> 类加载过程</h3><h4 id="_1-加载-loading" tabindex="-1"><a class="header-anchor" href="#_1-加载-loading" aria-hidden="true">#</a> 1.加载（Loading）</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>加载阶段的主要任务是将字节码文件加载到JVM的内存中，
并创建一个代表该类的Java.lang.Class对象。
这个Class对象是访问类在方法区中数据结构的接口。123456
加载阶段可以有多种方式获取字节码文件，例如从ZIP包、网络中获取，或者在运行时动态生成。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-链接" tabindex="-1"><a class="header-anchor" href="#_2-链接" aria-hidden="true">#</a> 2 链接</h4><h4 id="_2-1验证-verification" tabindex="-1"><a class="header-anchor" href="#_2-1验证-verification" aria-hidden="true">#</a> 2.1验证（Verification）</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>验证阶段确保加载的字节码文件是合法、合理且符合JVM规范的。
这包括格式检查、语义检查、字节码检查以及符号引用检查。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2准备-preparation" tabindex="-1"><a class="header-anchor" href="#_2-2准备-preparation" aria-hidden="true">#</a> 2.2准备（Preparation）：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在准备阶段，JVM为类的静态变量分配内存并将其初始化为默认值。这个阶段是在连接阶段中进行的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3解析-resolution" tabindex="-1"><a class="header-anchor" href="#_2-3解析-resolution" aria-hidden="true">#</a> 2.3解析（Resolution）：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>解析阶段是将常量池中的符号引用替换为直接引用的过程。
符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。
直接引用可以是直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-初始化-initialization" tabindex="-1"><a class="header-anchor" href="#_3-初始化-initialization" aria-hidden="true">#</a> 3.初始化（Initialization）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>初始化阶段是类加载过程的最后阶段，JVM开始执行类中编写的Java程序代码，
将主导权移交给应用程序。在这个阶段，
类变量和其他资源会根据程序员通过过程序编码制定的主观计划进行初始化。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2><h3 id="启动类加载器-bootstrap-class-loader" tabindex="-1"><a class="header-anchor" href="#启动类加载器-bootstrap-class-loader" aria-hidden="true">#</a> 启动类加载器（Bootstrap Class Loader）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>它是JVM的一部分，负责加载Java核心类库，如java.lang包中的类。
它是由本地代码实现的，通常不是Java类，因此无法直接访问。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展类加载器-extension-class-loader" tabindex="-1"><a class="header-anchor" href="#扩展类加载器-extension-class-loader" aria-hidden="true">#</a> 扩展类加载器（Extension Class Loader）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>它是sun.misc.Launcher$ExtClassLoader的实例，负责加载Java的扩展类库，
位于JAVA_HOME/lib/ext目录下的JAR文件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用程序类加载器-application-class-loader" tabindex="-1"><a class="header-anchor" href="#应用程序类加载器-application-class-loader" aria-hidden="true">#</a> 应用程序类加载器（Application Class Loader）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>也称为系统类加载器，它是sun.misc.Launcher$AppClassLoader的实例，
负责加载应用程序类路径（Classpath）上指定的类。
大多数情况下，用户自定义的类都是由应用程序类加载器加载的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器" aria-hidden="true">#</a> 自定义类加载器</h3><h2 id="双亲委派" tabindex="-1"><a class="header-anchor" href="#双亲委派" aria-hidden="true">#</a> 双亲委派</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>是Java类加载器的一种机制，用于实现类加载器之间的层级关系和加载类的优先级。
在双亲委派模型中，一个类加载器在加载类时，首先将加载请求委派给其父加载器，
只有在父加载器无法找到类时，才会尝试自己加载
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),r=[s];function l(t,c){return a(),i("div",null,r)}const v=e(n,[["render",l],["__file","jvm02-类加载.html.vue"]]);export{v as default};
