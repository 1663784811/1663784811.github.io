import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as r,a as d}from"./app-H3bzXATr.js";const h={},i=d('<h3 id="交换机" tabindex="-1"><a class="header-anchor" href="#交换机" aria-hidden="true">#</a> 交换机</h3><h4 id="_1-直连交换器-direct-exchange" tabindex="-1"><a class="header-anchor" href="#_1-直连交换器-direct-exchange" aria-hidden="true">#</a> 1.直连交换器 Direct Exchange</h4><p>根据消息的路由键精确匹配队列的绑定键来路由消息。 只有当消息的路由键与队列的绑定键完全匹配时，消息才会被路由到该队列</p><h4 id="_2-扇出交换器-fanout-exchange" tabindex="-1"><a class="header-anchor" href="#_2-扇出交换器-fanout-exchange" aria-hidden="true">#</a> 2.扇出交换器 Fanout Exchange</h4><p>将接收到的所有消息广播到所有绑定到该交换器的队列中，而不考虑路由键。它主要用于需要广播消息的场景</p><h4 id="_3-主题交换器-topic-exchange" tabindex="-1"><a class="header-anchor" href="#_3-主题交换器-topic-exchange" aria-hidden="true">#</a> 3.主题交换器 Topic Exchange</h4><p>根据消息的路由键模式（使用点分隔的单词）匹配队列的绑定键模式。 绑定键可以包含通配符 *（匹配一个单词）和 #（匹配零个或多个单词）</p><h4 id="_4-头交换器-headers-exchange" tabindex="-1"><a class="header-anchor" href="#_4-头交换器-headers-exchange" aria-hidden="true">#</a> 4.头交换器 Headers Exchange</h4><p>根据消息头属性而不是路由键来路由消息。绑定时，可以指定一组键值对， 只有当消息的头属性与绑定中指定的键值对匹配时，消息才会被路由到队列。</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><h4 id="_1-标准队列-standard-queue" tabindex="-1"><a class="header-anchor" href="#_1-标准队列-standard-queue" aria-hidden="true">#</a> 1.标准队列 Standard Queue</h4><p>标准队列是默认的队列类型，消息按照先进先出（FIFO）顺序进行处理。这种队列类型通常用于大多数一般用途的消息传递场景。</p><h4 id="_2-持久化队列-durable-queue" tabindex="-1"><a class="header-anchor" href="#_2-持久化队列-durable-queue" aria-hidden="true">#</a> 2.持久化队列 Durable Queue</h4><p>持久化队列在 RabbitMQ 服务器重启后依然存在，可以用来保证消息在系统故障时不丢失。 创建队列时，将 durable 参数设置为 true</p><h4 id="_3-临时队列-transient-queue" tabindex="-1"><a class="header-anchor" href="#_3-临时队列-transient-queue" aria-hidden="true">#</a> 3.临时队列 Transient Queue</h4><p>临时队列在 RabbitMQ 服务器重启或队列断开连接时会被删除。默认情况下，队列是临时的</p><h4 id="_4-独占队列exclusive-queue" tabindex="-1"><a class="header-anchor" href="#_4-独占队列exclusive-queue" aria-hidden="true">#</a> 4.独占队列Exclusive Queue</h4><p>独占队列只能由声明它的连接使用，并在连接断开时自动删除。这种队列通常用于单个客户端的临时消息存储</p><h4 id="_5-自动删除队列-auto-delete-queue" tabindex="-1"><a class="header-anchor" href="#_5-自动删除队列-auto-delete-queue" aria-hidden="true">#</a> 5.自动删除队列 Auto-Delete Queue</h4><p>自动删除队列在最后一个消费者断开连接时会被自动删除。它通常用于短期使用的队列。</p><h4 id="_6-延迟队列-delayed-queue" tabindex="-1"><a class="header-anchor" href="#_6-延迟队列-delayed-queue" aria-hidden="true">#</a> 6.延迟队列 Delayed Queue</h4><p>延迟队列用于消息在发布后延迟一段时间后再进行消费。这种功能可以通过插件（如 rabbitmq-delayed-message-exchange）实现。</p><h4 id="_7-死信队列-dead-letter-queue" tabindex="-1"><a class="header-anchor" href="#_7-死信队列-dead-letter-queue" aria-hidden="true">#</a> 7.死信队列（Dead-Letter Queue）</h4><p>死信队列用于存储无法被消费的消息。消息被拒绝、过期或者达到最大重试次数时， 会被发送到死信队列。创建队列时，可以设置死信交换器和死信路由键。</p><h4 id="_8-优先级队列-priority-queue" tabindex="-1"><a class="header-anchor" href="#_8-优先级队列-priority-queue" aria-hidden="true">#</a> 8.优先级队列（Priority Queue）</h4><p>优先级队列允许消息按优先级进行消费。高优先级的消息将比低优先级的消息优先消费。</p><h4 id="_9-镜像队列-mirrored-queue" tabindex="-1"><a class="header-anchor" href="#_9-镜像队列-mirrored-queue" aria-hidden="true">#</a> 9.镜像队列（Mirrored Queue）</h4><p>镜像队列用于高可用性设置。消息在集群中的多个节点上进行复制，从而在节点故障时提供冗余。</p>',28),u=[i];function t(n,c){return a(),r("div",null,u)}const o=e(h,[["render",t],["__file","05.交换机与队列.html.vue"]]);export{o as default};
