const t=JSON.parse('{"key":"v-370f4532","path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/03.JAVA%E5%9F%BA%E6%9C%AC/08.%E4%BB%A3%E7%90%86.html","title":"08.代理","lang":"zh-CN","frontmatter":{"article":false,"title":"08.代理","description":"静态代理 静态代理是在编译时就已经确定代理类的结构，需要手动编写代理类。 代理类和被代理类实现相同的接口或继承相同的父类， 代理类中包含对被代理对象的引用， 通过调用被代理对象的方法来间接实现目标操作。 静态代理的缺点是每个被代理对象都需要编写一个代理类，代码重复且不灵活。 动态代理 动态代理是在运行时动态生成代理类，不需要手动编写代理类。 Java ...","head":[["meta",{"property":"og:url","content":"https://xxxxxxx.xxx/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/03.JAVA%E5%9F%BA%E6%9C%AC/08.%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"鱼头笔记"}],["meta",{"property":"og:title","content":"08.代理"}],["meta",{"property":"og:description","content":"静态代理 静态代理是在编译时就已经确定代理类的结构，需要手动编写代理类。 代理类和被代理类实现相同的接口或继承相同的父类， 代理类中包含对被代理对象的引用， 通过调用被代理对象的方法来间接实现目标操作。 静态代理的缺点是每个被代理对象都需要编写一个代理类，代码重复且不灵活。 动态代理 动态代理是在运行时动态生成代理类，不需要手动编写代理类。 Java ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T17:31:12.000Z"}],["meta",{"property":"article:author","content":"鱼头"}],["meta",{"property":"article:modified_time","content":"2024-02-17T17:31:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"08.代理\\",\\"description\\":\\"静态代理 静态代理是在编译时就已经确定代理类的结构，需要手动编写代理类。 代理类和被代理类实现相同的接口或继承相同的父类， 代理类中包含对被代理对象的引用， 通过调用被代理对象的方法来间接实现目标操作。 静态代理的缺点是每个被代理对象都需要编写一个代理类，代码重复且不灵活。 动态代理 动态代理是在运行时动态生成代理类，不需要手动编写代理类。 Java ...\\"}"]]},"headers":[{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]}],"git":{"createdTime":1703506094000,"updatedTime":1708191072000,"contributors":[{"name":"1663784811@qq.com","email":"11663784811@qq.com","commits":1},{"name":"why","email":"1663784811@qq.com","commits":1}]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"编程语言/java/03.JAVA基本/08.代理.md","localizedDate":"2023年12月25日","autoDesc":true,"excerpt":""}');export{t as data};
