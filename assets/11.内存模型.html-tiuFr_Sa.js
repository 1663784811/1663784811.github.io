import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as r,a as h}from"./app-df0ehMoG.js";const d={},c=h('<h3 id="代码区" tabindex="-1"><a class="header-anchor" href="#代码区" aria-hidden="true">#</a> 代码区</h3><p>代码区存储了程序的机器代码，即程序的执行代码。<br> 代码区的内存分配是在程序加载到内存时完成的，且其内容是只读的，不能被修改。<br></p><h3 id="常量区" tabindex="-1"><a class="header-anchor" href="#常量区" aria-hidden="true">#</a> 常量区</h3><p>常量区存储了程序中定义的常量，如字符串常量等。<br> 常量区的内存分配是在程序启动时完成的，且其内容是只读的，不能被修改。<br></p><h3 id="全局变量区" tabindex="-1"><a class="header-anchor" href="#全局变量区" aria-hidden="true">#</a> 全局变量区</h3><p>全局变量区存储了程序中定义的全局变量和静态变量。<br> 全局变量在程序的整个生命周期内存在，它们的内存分配是在程序启动时完成的。<br></p><h3 id="栈区" tabindex="-1"><a class="header-anchor" href="#栈区" aria-hidden="true">#</a> 栈区</h3><p>栈是一种线性的数据结构，它是一种具有后进先出（LIFO）特性的容器。<br> 在函数调用时，局部变量、函数参数以及函数调用的返回地址等都存储在栈中。<br> 栈的内存分配和释放是自动的，由编译器和运行时系统负责管理。<br></p><h3 id="堆区" tabindex="-1"><a class="header-anchor" href="#堆区" aria-hidden="true">#</a> 堆区</h3><p>堆是一种动态分配的内存区域，用于存储动态分配的数据和对象。<br> 在C语言中，可以使用 malloc()、calloc()、realloc() 函数来动态分配堆内存，并使用 free() 函数来释放堆内存。<br> 堆的内存分配和释放需要显式地进行管理，程序员负责分配和释放堆内存。<br></p>',10),t=[c];function i(n,o){return e(),r("div",null,t)}const l=a(d,[["render",i],["__file","11.内存模型.html.vue"]]);export{l as default};
